<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function thisdayinhistory_help($section) {
  switch ($section) {
    case 'admin/help#thisdayinhistory':
      // This description shows up when users click "create content."
      $help_text = '<p>The <em>This Day in History</em> module allows users with the appropriate permissions to enter historical events. The historical events can be displayed in any number of Administrator defined blocks. Blocks can be configured to display historical events based on different criteria, such as taxonomy terms.</p>';
      return t($help_text);
			break;
  }
}


/**
 * Implementation of hook_node_info()
 */
function thisdayinhistory_node_info() {
  return array(
    'thisdayinhistory' => array(
      'name' => t('Historical event'),
      'module' => 'thisdayinhistory',
      'description' => t("An interesting or historical event from the past."),
    )
  );
}


/**
 * Implementation of hook_perm().
 */
function thisdayinhistory_perm() {
  return array(
		'administer this day in history',
  	'create historical events',
		'edit own historical events',
		'promote historical events to block'
		);
}


/**
 * Implementation of hook_access().
 */
function thisdayinhistory_access($op, $node) {
  global $user;

  // Admins can do anything
  if (user_access('administer this day in history')) return TRUE;

  if ($op == 'create') {
    return user_access('create historical events');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own historical events') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}


/**
 * Implementation of hook_menu().
 */
function thisdayinhistory_menu($may_cache) {
  global $user;

  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/thisdayinhistory',
      'title' => t('This Day in History'),
      'description' => t('Create and configure This Day in History blocks and configure options.'),
      'access' => user_access('administer this day in history (TDIH)'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('_thisdayinhistory_admin_settings')
    );
    $items[] = array(
      'path' => 'admin/settings/thisdayinhistory/overview',
      'title' => t('Overview'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1
    );
    $items[] = array(
      'path' => 'admin/settings/thisdayinhistory/blocks',
      'title' => t('Configure blocks'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('_thisdayinhistory_blocks'),
      'type' => MENU_LOCAL_TASK
    );
    $items[] = array(
      'path' => 'admin/settings/thisdayinhistory/delete', // Deletion confirmation
      'title' => t('Delete TDIH block'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('_thisdayinhistory_block_delete'),
      'type' => MENU_CALLBACK
    );
  }

  return $items;
}



/**
 * Implementation of hook_form().
 */
function thisdayinhistory_form(&$node) {
  $type = node_get_types('type', $node);
  drupal_add_css(drupal_get_path('module', 'thisdayinhistory') .'/thisdayinhistory.css');

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );

  // Put the body and its associated filter selection form into the same sub-array
  // so they don't get split up if someone plays around with weights
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Event'),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['body_filter']['filter'] = filter_form($node->format);

  // Now we define the form elements specific to our node type.
  $form['tdih_date'] = array(
    '#attributes'   => array('class' => 'tdih-date'),
    '#weight'       => -1
  );
  $form['tdih_date']['year'] = array(
    '#type' => 'textfield',
    '#title' => t('Year'),
    '#required' => TRUE,
    '#default_value' => $node->year,
    '#size' => 4,
    '#maxlength' => 4,
    '#field_suffix' => ' - ',
    '#attributes'   => array('class' => 'tdih-datefield'),
    '#prefix' => '<div class="tdih-date form-item"><label>Date:</label>',
  );
  $form['tdih_date']['month'] = array(
    '#type' => 'textfield',
    '#title' => t('Month'),
    '#required' => TRUE,
    '#default_value' => $node->month,
    '#size' => 4,
    '#maxlength' => 2,
    '#field_suffix' => ' - ',
  );
  $form['tdih_date']['day'] = array(
    '#type' => 'textfield',
    '#title' => t('Day'),
    '#required' => TRUE,
    '#default_value' => $node->day,
    '#size' => 4,
    '#maxlength' => 2,
    '#suffix' => '</div><div style="clear:both;"></div>'
  );

  if (user_access('promote quotes to block')) {
    $form['event_promote'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display in TDiH blocks'),
      '#default_value' => (isset($node->tdih_promote) ? $node->tdih_promote : 1)
    );
  }

  return $form;
}


/**
 * Implementation of hook_validate().
 */
function thisdayinhistory_validate($node) {
  if ($node->month < 1) {
    form_set_error('month', t('Month value can not be set less than 1'));
    return;
  }
  if ($node->month > 12) {
    form_set_error('month', t('Month value can not be set larger than 12'));
    return;
  }

  $daysInMonth = array(0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
  if ($node->day < 1) {
    form_set_error('day', t('Day value can not be set less than 1'));
    return;
  }
  if ( ($node->day < 1) || ($node->day > $daysInMonth[$node->month]) ) {
    form_set_error('day', t('Day value is too large'));
    return;
  }

}

/**
 * Implementation of hook_insert().
 */
function thisdayinhistory_insert($node) {
	$isodate = $node->year . '-' . $node->month . '-' . $node->day;
  db_query("INSERT INTO {thisdayinhistory}
					 (vid, nid, month, day, year, isodate, promote)
					 VALUES (%d, %d, '%d', %d, %d, '%s', %d)",
					 $node->vid, $node->nid, $node->month, $node->day, $node->year, $isodate, $node->event_promote);
}


/**
 * Implementation of hook_update().
 */
function thisdayinhistory_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    thisdayinhistory_insert($node);
  }
  else {
		$isodate = $node->year . '-' . $node->month . '-' . $node->day;
    db_query("UPDATE {thisdayinhistory}
						 SET month = %d, day = %d, year = %d, isodate = '%s', promote = %d WHERE vid = %d",
						 $node->month, $node->day, $node->year, $isodate, $node->event_promote, $node->vid);
  }
}


/**
 * Implementation of hook_delete().
 */
function thisdayinhistory_delete($node) {
  // When a node is deleted, we need to remove all related records from out table.
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {thisdayinhistory} WHERE nid = %d', $node->nid);
}


/**
 * Implementation of hook_load().
 */
function thisdayinhistory_load($node) {
  $additions = db_fetch_object(
    db_query('SELECT tdih.month, tdih.day, tdih.year, tdih.isodate, tdih.promote AS event_promote
             FROM {thisdayinhistory} tdih
             WHERE vid = %d', $node->vid)
  );
  return $additions;
}


/**
 * Implementation of hook_view().
 */
function thisdayinhistory_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['thisdayinhistory'] = array(
    '#value' => theme('thisdayinhistory_node_html', $node),
    '#weight' => -1,
  );

  return $node;
}


/**
 * Implementation of hook_block().
 */
function thisdayinhistory_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    //
    // List
    //
    case 'list':
      $blocks = array();
      $result = db_query('SELECT tdihb.bid, tdihb.name FROM {thisdayinhistory_blocks} tdihb');
      while ($block = db_fetch_object($result)) {
        $blocks[$block->bid] = array('info' => t('TDiH') . ': ' . $block->name);
      }
      return $blocks;
      
    //
    // View
    //
    case 'view':
      $block = db_fetch_array(
        db_query('SELECT tdihb.* FROM {thisdayinhistory_blocks} tdihb WHERE tdihb.bid = %d', $delta)
      );
      if (!$block) {
        return NULL;
      }

      $eventnodes = thisdayinhistory_get_events($block);
      
      if (count($eventnodes) == 0) {
        return NULL;
      }
      else {
        return array(
          'subject' => $block['name'],
          'content' => thisdayinhistory_theme_block($block, $eventnodes)
        );
      }

    //
    // Configure
    //
    case 'configure':
      $block = db_fetch_object(
        db_query("SELECT tdihb.* FROM {thisdayinhistory_blocks} tdihb WHERE bid = %d", $delta)
      );
      $block->uid_filter = explode(',', $block->uid_filter);
      $block->tid_filter = explode(',', $block->tid_filter);
      $block->rid_filter = explode(',', $block->rid_filter);

      // get roles
      $roles = user_roles(FALSE, 'create historical events');
      foreach (user_roles(FALSE, 'edit own historical events') as $rid => $role) {
        $roles[$rid] = $role;
      }
      foreach (user_roles(FALSE, 'administer this day in history') as $rid => $role) {
        $roles[$rid] = $role;
      }

      // Get users
      $users = array();
      if ($roles[DRUPAL_ANONYMOUS_RID]) {
        $users[0] = variable_get('anonymous', t('Anonymous'));
      }
      $result = db_query(
        "SELECT DISTINCT u.uid, u.name
        FROM {users} u
        LEFT JOIN {users_roles} ur ON ur.uid = u.uid
        WHERE u.uid = 1 OR ur.rid
        IN (%s)",
        implode(',', (count($roles) ? array_keys($roles) : array(0)))
      );
      while ($row = db_fetch_object($result)) {
        $users[$row->uid] = ($row->uid ? $row->name : variable_get('anonymous', t('Anonymous')));
      }

      $form = array();

      if ($delta) {
        $form['bid'] = array(
          '#type' => 'value',
          '#value' => $delta
        );
      }

      $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#required' => TRUE,
        '#default_value' => $block->name,
        '#description' => t('Enter a unique name for this block. This will identify the block on the !block administration page and be used for the default block title.', array('!block administration page' => l(t('block administration page'), 'admin/build/block'), '%title' => '%title'))
      );
      $form['header']['header_field'] = array(
        '#type' => 'textarea',
        '#title' => t('Header'),
        '#default_value' => $block->header,
      );
      $form['header']['header_filter'] = filter_form($block->header_format, NULL, array('header_filter'));
      $form['block_type'] = array(
        '#type' => 'radios',
        '#title' => t('Type'),
        '#required' => TRUE,
        '#default_value' => (($block->block_type == 1) ? 1 : 0),
        '#options' => array(t('All'), t('Random'))
      );

      if (count($roles)) {
        $form['rid_filter'] = array(
          '#type' => 'select',
          '#title' => t('Role filter'),
          '#multiple' => TRUE,
          '#default_value' => $block->rid_filter,
          '#options' => $roles,
          '#description' => t('To restrict this block to display only quotes submitted by users in specific roles, select the roles here.')
        );
      }
      else {
        $form['rid_filter'] = array(
          '#type' => 'item',
          '#title' => t('Role filter'),
          '#description' => t('There are no roles configured with the %create historical events, %administer this day in history permissions, or %edit own historical events, so no roles are available. To filter by role, please assign this permission to at least one role on the !access control page.', array('%create historical events' => t('create historical events'), '%administer this day in history' => t('administer this day in history'), '%edit own historical events' => t('edit own historical events'), '!access control page' => l(t('access control page'), 'admin/user/access')))
        );
      }

      $form['uid_filter'] = array(
        '#type' => 'select',
        '#title' => t('User filter'),
        '#multiple' => TRUE,
        '#default_value' => $block->uid_filter,
        '#options' => $users,
        '#description' => t('To restrict this block to display only This Day in History events submitted by specific users, select the users here.')
      );

      if (function_exists('taxonomy_form_all')) {
        $form['tid_filter'] = array(
          '#type' => 'select',
          '#title' => t('Category filter'),
          '#multiple' => TRUE,
          '#default_value' => $block->tid_filter,
          '#options' => taxonomy_form_all(TRUE),
          '#description' => t('To restrict this block to display only This Day in History events in specific categories, select the categories here.')
        );
      }

      return $form;

    case 'save':
      $uids = implode(',', (array) $edit['uid_filter']);
      $tids = implode(',', (array) $edit['tid_filter']);
      $rids = implode(',', (array) $edit['rid_filter']);

      db_query(
        "UPDATE {thisdayinhistory_blocks}
        SET name = '%s', block_type = %d, uid_filter = '%s', tid_filter = '%s', rid_filter = '%s', header='%s', header_format = %d
        WHERE bid = %d",
        $edit['name'], (($edit['block_type'] == 1) ? 1 : 0), $uids, $tids, $rids, $edit['header_field'], $edit['header_filter'], $delta
      );
  }
}

/**
 * Returns a list of This Day in History nodes based on the option list passed to it.
 * The option list is designed to accept a Block array retrieved from the database.
 *
 * @param $options
 *   The array specifying options and filter criteria
 *
 * @return
 *   A list of nodes matching the specified options and criteria.
 */
function thisdayinhistory_get_events($options = array()) {
  // Default values
  $month                 = date('n');
  $day                   = date('j');
  $promote               = '1';
  $type                  = 0;
  
  // Evaluate $options
  $added_joins           = '';
  $additional_conditions = '';
  foreach($options as $name => $value) {
    switch ($name) {
      case 'uid_filter':
        if ($value) {
          $additional_conditions .= " AND n.uid IN ($value)";
        }
        break;
      case 'tid_filter':
        if ($value) {
          $added_joins .= "INNER JOIN {term_node} tn ON tn.nid = n.nid ";
          $additional_conditions .= " AND tn.tid IN ($value)";
        }
        break;
      case 'rid_filter':
        if ($value) {
          $added_joins .= "LEFT JOIN {users_roles} ur ON ur.uid = n.uid ";
          $additional_conditions .= " AND ur.rid IN ($value) OR (" . DRUPAL_ANONYMOUS_RID . " IN ($value) AND n.uid = 0)";
        }
        break;
      case 'promoted_only':
        $promote = ($value) ? 1 : 0;
      case 'month':
        $month = $value;
      case 'day':
        $day = $value;
      case 'block_type':
        switch($value) {
          case 0:
            $type = 'all';
            break;
          case 1:
            $type = 'random';
            break;
        }
        break;
    }
  }

  $query = db_rewrite_sql(
    "SELECT n.nid FROM {thisdayinhistory} tdih
    INNER JOIN {node} n ON n.vid = tdih.vid
    $added_joins
    WHERE tdih.month = %d AND tdih.day = %d
      AND n.status = 1
      AND n.type = 'thisdayinhistory'
      AND tdih.promote = $promote
      $additional_conditions
    ORDER BY tdih.year"
  );

  $queryresult = db_query($query, $month, $day);

  $nodelist = array();
  while ($entry = db_fetch_object($queryresult)) {
    $nodelist[] = $entry->nid;
  }
  
  if ($type == 'random') {
    $count = count($nodelist);
    if ($count > 0) {
      $randomnode = $nodelist[rand(0, $count - 1)];
      $nodelist = array($randomnode);
    }
  }

  $renderednodes = array();
  foreach ($nodelist as $nodeID) {
    $renderednodes[] = node_prepare(node_load($nodeID), TRUE);
  }

  return $renderednodes;
}


/**
 *
 * Module Admin Functions
 *
 */

/**
 * Admin settings screen
 */
function _thisdayinhistory_admin_settings() {
  $form = array();
  $form['text'] = array(
    '#type' => 'item',
    '#title' => t('Content'),
    '#value' => t('Historical events: @total',
                  array('@total' => db_result(db_query("SELECT COUNT(*) FROM {node} n where type = 'thisdayinhistory'")))
                 )
  );

  return system_settings_form($form);
}


/**
 * Displays a list of currently-defined blocks.
 */
function _thisdayinhistory_blocks() {
  $form = array();
  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => 32,
    '#maxlength' => 64
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add block')
  );

  return $form;
}


/**
 * Renders the block list, including the "Add block" row.
 */
function theme__thisdayinhistory_blocks($form) {
  $header = array(t('Name'), t('Block ID'), t('Filters'), array('data' => t('Operations'), 'colspan' => 2));
  $result = db_query('SELECT tdihb.* FROM {thisdayinhistory_blocks} tdihb ORDER BY tdihb.name');
  $rows = array();

  while ($block = db_fetch_object($result)) {
    $filters = array();

    if ($block->nid_filter) {
      $filters[] = t('node');
    }

    if ($block->rid_filter) {
      $filters[] = t('role');
    }

    if ($block->uid_filter) {
      $filters[] = t('user');
    }

    if ($block->tid_filter) {
      $filters[] = t('term');
    }

    $rows[] = array(
      $block->name,
      $block->bid,
      implode(', ', (count($filters) ? $filters : array(t('none')))),
      l(t('configure block'), "admin/build/block/configure/thisdayinhistory/$block->bid"),
      l(t('delete block'), "admin/settings/thisdayinhistory/delete/$block->bid")
    );
  }

  $rows[] = array(
    drupal_render($form['name']),
    array('data' => drupal_render($form['submit']), 'colspan' => 4)
  );

  $output = drupal_render($form);

  if (count($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= theme('table', $header, array(array(array('data' => t('No blocks are defined.'), 'colspan' => 4))));
  }

  return $output;
}


/**
 * Validates that the new block name is valid.
 */
function _thisdayinhistory_blocks_validate($form_id, $form_values) {
  $name = trim($form_values['name']);

  if (!$name) {
    form_set_error('name', t('You must specify a valid block name.'));
  }
  else if (db_result(db_query("SELECT COUNT(*) FROM {thisdayinhistory_blocks} tdihb WHERE tdihb.name = '%s'", $name))) {
    form_set_error('name', t('The block name %name already exists. Please choose another block name.', array('%name' => $name)));
  }
}


/**
 * Creates the new block.
 *
 * @param $form_id
 *   The string specifying the form ID of the form that was submitted.
 * @param $form_values
 *   The array specifying the form values.
 */
function _thisdayinhistory_blocks_submit($form_id, $form_values) {
  db_query("INSERT INTO {thisdayinhistory_blocks}
    (bid, name, block_type, nid_filter, rid_filter, uid_filter, tid_filter, vid, header, header_format)
    VALUES (%d, '%s', 0, '', '', '', '', 0, '', 0)",
    db_next_id('{thisdayinhistory_blocks}_bid'), trim($form_values['name']));
}


/**
 * Confirms the deletion a block.
 */
function _thisdayinhistory_block_delete($bid) {
  $block = db_fetch_object(db_query('SELECT tdihb.name FROM {thisdayinhistory_blocks} tdihb WHERE tdihb.bid = %d', $bid));

  $form = array();
  $form['bid'] = array(
    '#type' => 'value',
    '#value' => $bid
  );
  $form['block_name'] = array(
    '#type' => 'value',
    '#value' => $block->name
  );

  return confirm_form($form, t('Are you sure you want to delete the block %name?', array('%name' => $block->name)), 'admin/settings/thisdayinhistory/blocks', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Deletes the specified block.
 *
 * @param $form_id
 *   The string specifying the form ID of the form that was submitted.
 * @param $form_values
 *   The array specifying the form values.
 *
 * @result
 *   A string specifying the page to which the user should be
 *   redirected (admin/settings/quotes/blocks).
 */
Function _thisdayinhistory_block_delete_submit($form_id, $form_values) {
  db_query("DELETE FROM {thisdayinhistory_blocks} WHERE bid = %d", $form_values['bid']);
  drupal_set_message(t('The block %name has been removed.', array('%name' => $form_values['block_name'])));
  cache_clear_all();

  return 'admin/settings/thisdayinhistory/blocks';
}



/**
 *
 * Theme Functions
 *
 */


/**
 * Default theme function for node html
 */
function theme_thisdayinhistory_node_html($node) {
  $output = '<div class="thisdayinhistory_info">';
  $output .= t('Date: %isodate', array('%isodate' => check_plain($node->isodate)));
  $output .= '</div>';
  return $output;
}


/**
 * Call the block theming function in a way that allows user theming functions
 * to over ride the default theming function.
 * 
 * @param $block
 *   An array containing the block information.
 * @param $nodelist
 *   An array containing a list of nodes for theming.
 *   
 * @result
 *   A string containing HTML which the theme engine output to the Block
 */
function thisdayinhistory_theme_block() {
  $args = func_get_args();
  $block    = $args[0];
  $nodelist = $args[1];
  $namebase = 'thisdayinhistory_block';

  $block['header_raw'] = $block['header'];
  $block['header'] = check_markup($block['header_raw'], $block['header_format'], FALSE);
  unset($block['header_format']);

  if (!($func = theme_get_function($namebase . "_" . $block['bid']))) {
    $func = theme_get_function($namebase);
  }

  if ($func) {
    return call_user_func_array($func, array($block, $nodelist));
  }
}



/**
 * Default theme function for This Day in History block html
 * 
 * @param $block
 *   An array containing the block information.
 * @param $nodelist
 *   An array containing a list of nodes for theming.
 *   
 * @result
 *   A string containing HTML which the theme engine output to the Block
 */
function theme_thisdayinhistory_block($block, $nodes) {
  drupal_add_css(drupal_get_path('module', 'thisdayinhistory') .'/thisdayinhistory.css');

  foreach($nodes as $node) {
    $nodes_by_year[$node->year][] = $node;
  }

  foreach($nodes_by_year as $year => $nodelist) {
    $first = true;
    foreach($nodelist as $node) {
      $row = array(
        array('data' => '<p>' . $node->year . ':</p>', 'valign' => 'top', 'class' => 'year-column'),
        $node->teaser
      );
      $tablerows[] = $row;
    }
  }

  $attributes = array('class' => 'tdih-events');
  return $block['header'] . theme('table', array(), $tablerows, $attributes);
}


/**
 *
 * Import Node Module Hooks
 *
 */

/**
 * Returns a list of node types which have full support for importing provided
 * by other hooks.
 *
 * @return
 *   An associative array of node types containting the value for the type
 *   child of the node object => human-readable name.
 */
function thisdayinhistory_node_import_types() {
  return array('thisdayinhistory' => t('This Day In History'));
}

/**
 * Provides a list of fields which each module understands. When importing the
 * array keys will be used to name the node object's children.
 *
 * @param $type
 *   A string containing the node type currently being processed.
 * @return
 *   An associative array of node object children names => human readable
 *   descriptions.
 */
function thisdayinhistory_node_import_fields($type) {
  if ($type == 'thisdayinhistory') {
    return array(
      'body' => t('This Day in History: Event'),
      'title' => t('Title'),
      'iso_date'      => t('This Day in History: Date yyyy-mm-dd'),
      'european_date' => t('This Day in History: Date dd/mm/yyyy'),
      'american_date' => t('This Day in History: Date mm/dd/yyyy'),
      'text_date'     => t('This Day in History: Date mmm d, yyyy'),
      'promote' => t('This Day in History: Promote to Block')
    );
  }
}


/**
 * Hook that is called before node_validate. This allows a module to
 * change the imported field from a user readable format to a format
 * node_save understands.
 *
 * See import_taxonomy.inc for a complex example.
 *
 * @param &$node
 *   A node object which can be changed if needed.
 * @param $preview
 *   Boolean. If TRUE this function is only run in a preview stage. The
 *   function should then avoid making permanent changes to any database
 *   table. If FALSE the function may commit permanent changes to the
 *   database that are needed to import the node.
 * @return
 *   Nothing.
 */
function thisdayinhistory_node_import_prepare(&$node, $preview = FALSE) {
  if ($node->iso_date) {
    $dateparts = explode('-', check_plain($node->iso_date));
    $node->year = $dateparts[0];
    $node->month = $dateparts[1];
    $node->day = $dateparts[2];
  }
  else if ($node->text_date) {
    $dateparts = explode(' ', check_plain($node->text_date));
    $monthmap = array(t('jan') => 1, t('feb') => 2, t('mar') => 3, t('apr') => 4, t('may') => 5, t('jun') => 6,
                      t('jul') => 7, t('aug') => 8, t('sep') => 9, t('oct') => 10, t('nov') => 11, t('dec') => 12 );
    $node->year = $dateparts[2];
    $node->month = $monthmap[strtolower($dateparts[0])];
    $node->day = str_replace(',', '', $dateparts[1]);
  }
  else if ($node->european_date) {
    $dateparts = explode('/', check_plain($node->european_date));
    $node->year = $dateparts[2];
    $node->month = $dateparts[1];
    $node->day = $dateparts[0];
  }
  else if ($node->american_date) {
    $dateparts = explode('/', check_plain($node->american_date));
    $node->year = $dateparts[2];
    $node->month = $dateparts[0];
    $node->day = $dateparts[1];
  }
  $node->isodate = $node->year . '-' . $node->month . '-' . $node->day;

  $node->teaser = isset($node->body) ? node_teaser($node->body, isset($node->format) ? $node->format : NULL) : '';

  if (!$node->event_promote) {
    $node->event_promote = 1;
  }
  else {
    $node->event_promote = ($node->promote) ? 1 : 0;
  }
  
  return;
}



/**
 *
 * SimpleTest Hooks
 *
 */

/**
* Implementation of hook_simpletest().
*/
function thisdayinhistory_simpletest() {
  $dir = drupal_get_path('module', 'thisdayinhistory') . '/tests';
  $tests = file_scan_directory($dir, '\.test$');
  return array_keys($tests);
}
