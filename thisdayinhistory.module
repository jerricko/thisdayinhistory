<?php
// $Id$

/**
 * @file
 * Main module file for This Day in History module.
 */

/**
 * Implementation of hook_help().
 */
function thisdayinhistory_help($path, $arg) {
  switch ($path) {
    case 'admin/help#thisdayinhistory':
      // This description shows up when users click "create content."
      $help_text = '<p>The <em>This Day in History</em> module allows users with the appropriate permissions to enter historical events. The historical events can be displayed in any number of Administrator defined blocks. Blocks can be configured to display historical events based on different criteria, such as taxonomy terms.</p>';
      return t($help_text);
      break;
  }
}


/**
 * Implementation of hook_node_info().
 */
function thisdayinhistory_node_info() {
  return array(
    'thisdayinhistory' => array(
      'name' => t('Historical event'),
      'module' => 'thisdayinhistory',
      'description' => t("An interesting or historical event from the past."),
    )
  );
}


/**
 * Implementation of hook_perm().
 */
function thisdayinhistory_perm() {
  return array(
    'administer this day in history',
    'create historical events',
    'edit own historical events',
    'promote historical events to block'
  );
}


/**
 * Implementation of hook_access().
 */
function thisdayinhistory_access($op, $node, $account) {
  // Admins can do anything
  if (user_access('administer this day in history', $account)) return TRUE;

  if ($op == 'create') {
    return user_access('create historical events', $account);
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own historical events', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
}


/**
 * Implementation of hook_menu().
 */
function thisdayinhistory_menu() {
  $items = array();

  $items['admin/settings/thisdayinhistory'] = array(
    'title' => 'This Day in History',
    'description' => 'Create and configure This Day in History blocks and configure options.',
    'access callback' => 'user_access',
    'access arguments' => array('administer this day in history'),
    'page callback' => 'thisdayinhistory_admin_overview',
    //'page arguments' => array('_thisdayinhistory_admin_settings'),
    'file' => 'thisdayinhistory.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/thisdayinhistory/overview'] = array(
    'title' => 'Overview',
    'description' => 'Create and configure This Day in History blocks and configure options.',
    'access callback' => 'user_access',
    'access arguments' => array('administer this day in history'),
    'file' => 'thisdayinhistory.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -2
  );
  $items['admin/settings/thisdayinhistory/blocks'] = array(
    'title' => 'Configure blocks',
    'description' => 'Configure blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thisdayinhistory_blocks_configure'),
    'access callback' => 'user_access',
    'access arguments' => array('administer this day in history'),
    'file' => 'thisdayinhistory.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -1
  );
  $items['admin/settings/thisdayinhistory/blocks/delete'] = array(
    'title' => 'Delete TDIH block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thisdayinhistory_block_delete_confirmation'),
    'access callback' => 'user_access',
    'access arguments' => array('administer this day in history'),
    'file' => 'thisdayinhistory.admin.inc',
    'type' => MENU_CALLBACK
  );

  return $items;
}


/**
 * Implementation of hook_form().
 */
function thisdayinhistory_form(&$node) {
  $type = node_get_types('type', $node);
  drupal_add_css(drupal_get_path('module', 'thisdayinhistory') .'/thisdayinhistory.css');

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );

  // Put the body and its associated filter selection form into the same sub-array
  // so they don't get split up if someone plays around with weights
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Event'),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['body_filter']['filter'] = filter_form($node->format);

  // Now we define the form elements specific to our node type.
  $form['tdih_date'] = array(
    '#attributes'   => array('class' => 'tdih-date'),
    '#weight'       => -1
  );
  $form['tdih_date']['year'] = array(
    '#type' => 'textfield',
    '#title' => t('Year'),
    '#required' => TRUE,
    '#default_value' => $node->year,
    '#size' => 4,
    '#maxlength' => 4,
    '#field_suffix' => ' - ',
    '#attributes'   => array('class' => 'tdih-datefield'),
    '#prefix' => '<div class="tdih-date form-item"><label>Date:</label>',
  );
  $form['tdih_date']['month'] = array(
    '#type' => 'textfield',
    '#title' => t('Month'),
    '#required' => TRUE,
    '#default_value' => $node->month,
    '#size' => 4,
    '#maxlength' => 2,
    '#field_suffix' => ' - ',
  );
  $form['tdih_date']['day'] = array(
    '#type' => 'textfield',
    '#title' => t('Day'),
    '#required' => TRUE,
    '#default_value' => $node->day,
    '#size' => 4,
    '#maxlength' => 2,
    '#suffix' => '</div><div style="clear:both;"></div>'
  );

  if (user_access('promote quotes to block')) {
    $form['blockdisplay'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display in TDiH blocks'),
      '#default_value' => (isset($node->blockdisplay) ? $node->blockdisplay : 1)
    );
  }

  return $form;
}


/**
 * Implementation of hook_validate().
 */
function thisdayinhistory_validate($node, &$form) {
  $texterror = FALSE;
  if (!is_numeric($node->year)) {
    form_set_error('year', t('Year value must be entered as a integer'));
    $texterror = TRUE;
  }
  if (!is_numeric($node->month)) {
    form_set_error('month', t('Month value must be entered as a integer'));
    $texterror = TRUE;
  }
  if (!is_numeric($node->day)) {
    form_set_error('day', t('Day value must be entered as a integer'));
    $texterror = TRUE;
  }
  if ($texterror) return;

  if ($node->month < 1) {
    form_set_error('month', t('Month value can not be set less than 1'));
    return;
  }
  if ($node->month > 12) {
    form_set_error('month', t('Month value can not be set larger than 12'));
    return;
  }

  $days_in_month = array(0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
  if ($node->day < 1) {
    form_set_error('day', t('Day value can not be set less than 1'));
    return;
  }
  if ($node->day > $days_in_month[(int)$node->month]) {
    form_set_error('day', t('Day value is too large'));
    return;
  }
}


/**
 * Implementation of hook_insert().
 */
function thisdayinhistory_insert($node) {
  $isodate = $node->year .'-'. $node->month .'-'. $node->day;
  db_query("INSERT INTO {thisdayinhistory}
          (vid, nid, month, day, year, isodate, blockdisplay)
          VALUES (%d, %d, '%d', %d, %d, '%s', %d)",
          $node->vid, $node->nid, $node->month, $node->day, $node->year, $isodate, $node->blockdisplay);
}


/**
 * Implementation of hook_update().
 */
function thisdayinhistory_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    thisdayinhistory_insert($node);
  }
  else {
    $isodate = $node->year .'-'. $node->month .'-'. $node->day;
    db_query("UPDATE {thisdayinhistory}
            SET month = %d, day = %d, year = %d, isodate = '%s', blockdisplay = %d WHERE vid = %d",
            $node->month, $node->day, $node->year, $isodate, $node->blockdisplay, $node->vid);
  }
}


/**
 * Implementation of hook_delete().
 */
function thisdayinhistory_delete($node) {
  // When a node is deleted, we need to remove all related records from out table.
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {thisdayinhistory} WHERE nid = %d', $node->nid);
}


/**
 * Implementation of hook_load().
 */
function thisdayinhistory_load($node) {
  $additions = db_fetch_object(
    db_query('SELECT tdih.month, tdih.day, tdih.year, DATE(tdih.isodate) as isodate, tdih.blockdisplay
             FROM {thisdayinhistory} tdih
             WHERE vid = %d', $node->vid)
  );
  return $additions;
}


/**
 * Implementation of hook_view().
 */
function thisdayinhistory_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if (!$node->isodate) $node->isodate = $node->year .'-'. $node->month .'-'. $node->day;
  $node->content['thisdayinhistory'] = array(
    '#value' => theme('thisdayinhistory_node_field', $node),
    '#weight' => -1,
  );

  return $node;
}


/**
 * Implementation of hook_block().
 */
function thisdayinhistory_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    //
    // List
    //
    case 'list':
      $blocks = array();
      $block_list = db_query('SELECT tdihb.bid, tdihb.name FROM {thisdayinhistory_blocks} tdihb');
      while ($block = db_fetch_object($block_list)) {
        $blocks[$block->bid] = array('info' => t('TDiH') .': '. $block->name);
      }
      return $blocks;

    //
    // View
    //
    case 'view':
      return thisdayinhistory_get_block($delta);

    //
    // Configure
    //
    case 'configure':
      $block = db_fetch_object(
        db_query("SELECT tdihb.* FROM {thisdayinhistory_blocks} tdihb WHERE bid = %d", $delta)
      );
      $block->uid_filter = explode(',', $block->uid_filter);
      $block->tid_filter = explode(',', $block->tid_filter);
      $block->rid_filter = explode(',', $block->rid_filter);

      // get roles
      $roles = user_roles(FALSE, 'create historical events');
      foreach (user_roles(FALSE, 'edit own historical events') as $rid => $role) {
        $roles[$rid] = $role;
      }
      foreach (user_roles(FALSE, 'administer this day in history') as $rid => $role) {
        $roles[$rid] = $role;
      }

      // Get users
      $users = array();
      if ($roles[DRUPAL_ANONYMOUS_RID]) {
        $users[0] = variable_get('anonymous', t('Anonymous'));
      }
      $result = db_query(
        "SELECT DISTINCT u.uid, u.name
        FROM {users} u
        LEFT JOIN {users_roles} ur ON ur.uid = u.uid
        WHERE u.uid = 1 OR ur.rid
        IN (%s)",
        implode(',', (count($roles) ? array_keys($roles) : array(0)))
      );
      while ($row = db_fetch_object($result)) {
        $users[$row->uid] = ($row->uid ? $row->name : variable_get('anonymous', t('Anonymous')));
      }

      $form = array();

      if ($delta) {
        $form['bid'] = array(
          '#type' => 'value',
          '#value' => $delta
        );
      }

      $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#required' => TRUE,
        '#default_value' => $block->name,
        '#description' => t('Enter a unique name for this block. This will identify the block on the !block administration page and be used for the default block title.', array('!block administration page' => l(t('block administration page'), 'admin/build/block'), '%title' => '%title'))
      );
      $form['header']['header_field'] = array(
        '#type' => 'textarea',
        '#title' => t('Header'),
        '#default_value' => $block->header,
      );
      $form['header']['header_filter'] = filter_form($block->header_format, NULL, array('header_filter'));
      $form['block_type'] = array(
        '#type' => 'radios',
        '#title' => t('Type'),
        '#required' => TRUE,
        '#default_value' => (($block->block_type == 1) ? 1 : 0),
        '#options' => array(t('All'), t('Random'))
      );

      if (count($roles)) {
        $form['rid_filter'] = array(
          '#type' => 'select',
          '#title' => t('Role filter'),
          '#multiple' => TRUE,
          '#default_value' => $block->rid_filter,
          '#options' => $roles,
          '#description' => t('To restrict this block to display only quotes submitted by users in specific roles, select the roles here.')
        );
      }
      else {
        $form['rid_filter'] = array(
          '#type' => 'item',
          '#title' => t('Role filter'),
          '#description' => t('There are no roles configured with the %create historical events, %administer this day in history permissions, or %edit own historical events, so no roles are available. To filter by role, please assign this permission to at least one role on the !access control page.', array('%create historical events' => t('create historical events'), '%administer this day in history' => t('administer this day in history'), '%edit own historical events' => t('edit own historical events'), '!access control page' => l(t('access control page'), 'admin/user/access')))
        );
      }

      $form['uid_filter'] = array(
        '#type' => 'select',
        '#title' => t('User filter'),
        '#multiple' => TRUE,
        '#default_value' => $block->uid_filter,
        '#options' => $users,
        '#description' => t('To restrict this block to display only This Day in History events submitted by specific users, select the users here.')
      );

      if (function_exists('taxonomy_form_all')) {
        $form['tid_filter'] = array(
          '#type' => 'select',
          '#title' => t('Category filter'),
          '#multiple' => TRUE,
          '#default_value' => $block->tid_filter,
          '#options' => taxonomy_form_all(TRUE),
          '#description' => t('To restrict this block to display only This Day in History events in specific categories, select the categories here.')
        );
      }

      return $form;

    case 'save':
      $uids = implode(',', (array) $edit['uid_filter']);
      $tids = implode(',', (array) $edit['tid_filter']);
      $rids = implode(',', (array) $edit['rid_filter']);

      db_query(
        "UPDATE {thisdayinhistory_blocks}
        SET name = '%s', block_type = %d, uid_filter = '%s', tid_filter = '%s', rid_filter = '%s', header='%s', header_format = %d
        WHERE bid = %d",
        $edit['name'], (($edit['block_type'] == 1) ? 1 : 0), $uids, $tids, $rids, $edit['header_field'], $edit['header_filter'], $delta
      );
  }
}

/**
 * Returns a list of This Day in History nodes based on the option list passed to it.
 * The option list is designed to accept a Block array retrieved from the database.
 *
 * @param $options
 *   The array specifying options and filter criteria
 *
 * @return
 *   A list of nodes matching the specified options and criteria.
 */
function thisdayinhistory_get_events($options = array()) {
  // Default values
  $month                 = date('n');
  $day                   = date('j');
  $promote               = '1';
  $type                  = 0;

  // Evaluate $options
  $added_joins           = '';
  $additional_conditions = '';
  foreach ($options as $name => $value) {
    switch ($name) {
      case 'uid_filter':
        if ($value) {
          $additional_conditions .= " AND n.uid IN ($value)";
        }
        break;
      case 'tid_filter':
        if ($value) {
          $added_joins .= "INNER JOIN {term_node} tn ON tn.nid = n.nid ";
          $additional_conditions .= " AND tn.tid IN ($value)";
        }
        break;
      case 'rid_filter':
        if ($value) {
          $added_joins .= "LEFT JOIN {users_roles} ur ON ur.uid = n.uid ";
          $additional_conditions .= " AND ur.rid IN ($value) OR (". DRUPAL_ANONYMOUS_RID ." IN ($value) AND n.uid = 0)";
        }
        break;
      case 'promoted_only':
        $promote = ($value) ? 1 : 0;
      case 'month':
        $month = $value;
      case 'day':
        $day = $value;
      case 'block_type':
        switch ($value) {
          case 0:
            $type = 'all';
            break;
          case 1:
            $type = 'random';
            break;
        }
        break;
    }
  }

  $query = db_rewrite_sql(
    "SELECT n.nid FROM {thisdayinhistory} tdih
    INNER JOIN {node} n ON n.vid = tdih.vid
    $added_joins
    WHERE tdih.month = %d AND tdih.day = %d
      AND n.status = 1
      AND n.type = 'thisdayinhistory'
      AND tdih.blockdisplay = $promote
      $additional_conditions
    ORDER BY tdih.year"
  );

  $queryresult = db_query($query, $month, $day);

  $nodelist = array();
  while ($entry = db_fetch_object($queryresult)) {
    $nodelist[] = $entry->nid;
  }

  if ($type == 'random') {
    $count = count($nodelist);
    if ($count > 0) {
      $randomnode = $nodelist[rand(0, $count - 1)];
      $nodelist = array($randomnode);
    }
  }

  $renderednodes = array();
  foreach ($nodelist as $node_id) {
    $renderednodes[] = node_prepare(node_load($node_id), TRUE);
  }

  return $renderednodes;
}

function thisdayinhistory_get_block($delta) {
  $block = db_fetch_array(
    db_query('SELECT tdihb.* FROM {thisdayinhistory_blocks} tdihb WHERE tdihb.bid = %d', $delta)
  );
  if (!$block) {
    return NULL;
  }

  $eventnodes = thisdayinhistory_get_events($block);

  if (count($eventnodes) == 0) {
    return NULL;
  }
  else {
    return array(
      'subject' => $block['name'],
      'content' => theme('thisdayinhistory_block_content', $block, $eventnodes)
    );
  }
}


/**
 *
 * Theme Functions
 *
 */

/**
 * Implementation of hook_theme().
 */
function thisdayinhistory_theme() {
  return array(
    'thisdayinhistory_blocks_configure' => array(
      'arguments' => array('form' => NULL),
    ),
    'thisdayinhistory_node_field' => array(
      'file' => 'thisdayinhistory.module',
      'arguments' => array(
        'node' => NULL,
      ),
    ),
    'thisdayinhistory_block_content' => array(
      'template'  => 'thisdayinhistory-block-content',
      'path'      => drupal_get_path('module', 'thisdayinhistory') .'/theme',
      'arguments' => array(
        'block' => NULL,
        'node_list' => NULL,
      ),
    ),
  );
}


/**
 * Default theme function for TDiH date field displayed with node
 */
function theme_thisdayinhistory_node_field($node) {
  $output = '<div class="thisdayinhistory-date">';
  $output .= t('Date: %isodate', array('%isodate' => check_plain($node->isodate)));
  $output .= '</div>';
  return $output;
}


/**
 *
 * Import Node Module Hooks
 *
 */

/**
 * Implementation of Node Import's hook_node_import_fields().
 */
function thisdayinhistory_node_import_fields($type) {
  if ($type == 'node:thisdayinhistory') {
    return array(
      'iso_date' => array(
        'title'         => t('TDiH Event Date, formatted: yyyy-mm-dd'),
        'is_mappable'   => TRUE,
        'map_required'  => FALSE,
      ),
      'european_date' => array(
        'title'         => t('TDiH Event Date, formatted: dd/mm/yyyy'),
        'is_mappable'   => TRUE,
        'map_required'  => FALSE,
      ),
      'american_date' => array(
        'title'         => t('TDiH Event Date, formatted: mm/dd/yyyy'),
        'is_mappable'   => TRUE,
        'map_required'  => FALSE,
      ),
      'text_date' => array(
        'title'         => t('TDiH Event Date, formatted: mmm d, yyyy'),
        'is_mappable'   => TRUE,
        'map_required'  => FALSE,
      ),
      'blockdisplay' => array(
        'title'         => t('TDiH: Display in Block'),
        'is_mappable'   => TRUE,
        'map_required'  => FALSE,
      ),
    );
  }
}


/**
 * Implementation of Node Import's hook_node_import_values_alter().
 */
function thisdayinhistory_node_import_values_alter(&$values, $type, $options, $preview) {
  if ($values['iso_date']) {
    $dateparts = explode('-', check_plain($values['iso_date']));
    $values['year']   = $dateparts[0];
    $values['month']  = $dateparts[1];
    $values['day']    = $dateparts[2];
  }
  else if ($values['text_date']) {
    $monthmap = array(t('jan') => 1, t('feb') => 2, t('mar') => 3, t('apr') => 4, t('may') => 5, t('jun') => 6,
                      t('jul') => 7, t('aug') => 8, t('sep') => 9, t('oct') => 10, t('nov') => 11, t('dec') => 12 );
    $dateparts = explode(' ', check_plain($values['text_date']));
    $values['year']   = $dateparts[2];
    $values['month']  = $monthmap[strtolower($dateparts[0])];
    $values['day']    = str_replace(',', '', $dateparts[1]);
  }
  else if ($values['european_date']) {
    $dateparts = explode('/', check_plain($values['european_date']));
    $values['year']   = $dateparts[2];
    $values['month']  = $dateparts[1];
    $values['day']    = $dateparts[0];
  }
  else if ($values['american_date']) {
    $dateparts = explode('/', check_plain($values['american_date']));
    $values['year']   = $dateparts[2];
    $values['month']  = $dateparts[0];
    $values['day']    = $dateparts[1];
  }
  $values['isodate'] = $node->year .'-'. $node->month .'-'. $node->day;

  if ($values['blockdisplay'] == NULL) {
    $values['blockdisplay'] = 1;
  }
}

/**
 * Implementation of Node Import's hook_node_import_fields_alter().
 */
function thisdayinhistory_node_import_fields_alter(&$fields, $type) {
  $fields['body']['title'] = 'Event Description';
}
